function  [holderExponentsSTable, pricesSTable] = ...
    CalculateMultifractalAnalysis(startDate, endDate, path, varargin)

% CalculateMultifractalAnalysis(iniDate, endDate, varargin)
% obtain a pair of graphs of a Multifractal Analysis
% using the financial time series using varargin,
% that determine the tickers that we want in the analysis.
% One of the aim of the code is to obtain the Hölder exponent
% (also called Hurst exponent / Index): The Hurst exponent is used
% as a measure of long-term memory of time series. It relates to the
% autocorrelations of the time series, and the rate at which these
% decrease as the lag between pairs of values increases.
% At th end, we simulate a path of prices with this parameter
% (called Geometric Fractional Brownian Motion)
% iniDate and endDate are the point in time date that we
% want to do the analysis.
% requires a path folder, the folder path where the files are saved
% the OUTPUT are:
% holderExponentsSTable = Structure with n tables with
% differents hölder Exponents for every ticker
% pricesSTable = Structure with n tables with real prices and
% the GFBM simulation with respective returns.
% warning, we have a list of tickers  but maybe
% this list need to be updated, we included in the code an
% error message when the ticker is missed: the ticker and
% the name of the variable is required in the ftick variable.
% try
% [holderExponentsSTable, pricesSTable] = ...
%     CalculateMultifractalAnalysis('01012018', '01012019', '^GSPC',...
%     '^GDAXI', '^IXIC', '000001.SS', 'BNP.PA')


% list of tickers
% (maybe this list need to be updated with the ticker
% and name required)
ftick = {'^GSPC', 'SP500';...
    '^IBEX', 'IBEX35';...
    '^FCHI', 'CAC40';...
    '^FTSE', 'FTSE100';...
    '^N225', 'Nikkei225';...
    '000001.SS', 'SSECompInd';...
    'BAC', 'BankAmer';...
    'C', 'Citigroup';...
    'GS', 'GoldmanSachs';...
    'JPM', 'JPMorgCh';...
    'MS', 'MorgStanl';...
    'BBVA.MC', 'BBVA';...
    'SAN', 'Santander';...
    'CABK.MC', 'Caixabank';...
    'SAB.MC', 'Sabadell';...
    'BNP.PA', 'BNP';...
    'ACA.PA', 'CreditAgricole';...
    'GLE.PA', 'SocieteGenerale';...
    'HSBC', 'HSBC';...
    'BARC.L', 'Barclays';...
    'LLOY.L', 'Lloyds';...
    'RBS.L', 'RoyalBankScot';...
    'MTU', 'MitsubishiBank';...
    'SMFG', 'SumitoBank';...
    'MFG', 'MizuhoBank';...
    '601398.SS', 'ICBC';...
    '601939.SS', 'CBC';...
    '601288.SS', 'ABC';...
    '^GDAXI', 'DAX';...
    '^IXIC', 'NASDAQ';...
    'MSFT', 'Microsoft';...
    'AMZN', 'Amazon';...
    'APPL', 'Apple';...
    'GOOG', 'Google';...
    'PG', 'Proct&Gamb';...
    'BA', 'Boing';
    };

% download the data
if iscell(varargin)
    dtick = varargin{1,:};
else 
    dtick = varargin;
end     


% check the list
idx = ismember(ftick, dtick);
rtick = ftick(idx(:, 1), :);
dtick2 = rtick(:, 1);

% download historical data
stocks = hist_stock_data(startDate, endDate, dtick2);
n = size(stocks, 2);

% multifractal analysis
for i = 1:n
    disp(['Reading Prices from ', char(string(rtick(i, 2))),...
        ' in ', datestr(datetime(startDate, 'InputFormat',...
        'ddMMyyyy'), 'dd-mm-yyyy'),' to ', datestr(datetime(endDate,...
        'InputFormat','ddMMyyyy'), 'dd-mm-yyyy')])
    % catch the prices
    prices = stocks(i).Close;
    ret = price2ret(prices);
    m = size(ret,1);
    % simulate brownian motion
    randn(m, 1);
    dt = 1;
    dW = zeros(1, m);
    W = zeros(1, m);
    dW(1) = sqrt(dt)*randn;
    W(1) = dW(1);
    for j = 2:m
        dW(j) = sqrt(dt)*randn;
        W(j) = W(j-1) + dW(j);
    end
    
    % simulate geometric brownian motion
    simul = assetpath(prices(1), mean(ret), std(ret), 1, m, 1);
    % power spectral density
    [Pxx,F] = pwelch(W, kaiser(m, 2*pi), 0.75*(m+1), m, 1);
    [Pxx2,F2] = pwelch(simul, kaiser(m+1, 2*pi), 0.75*(m+1), m+1, 1);
    [Pxx3,F3] = pwelch(prices, kaiser(m+1, 2*pi), 0.75*(m+1), m+1, 1);
    % plot power spectral density
    p1 = figure('visible', 'off', 'units', 'normalized',...
        'outerposition', [0 0 1 1]);
    subplot(1,3,1)
    plot(log10(F(2:end)), log10(Pxx(2:end)));
    hold on
    xlabel('log10(F)'); ylabel('log10(Pxx)');
    title('PSD of the Brownian Motion')
    X = [ones(length(F(2:end)),1) log10(F(2:end))];
    % Least squares
    b = lscov(X, log10(Pxx(2:end)));
    % regression line
    y = b(1) + b(2)*log10(F(2:end));
    hold on;
    plot(log10(F(2:end)), y);
    legend(['The slope is ' num2str(b(2))]);
    subplot(1,3,2)
    plot(log10(F2(2:end)), log10(Pxx2(2:end)));
    xlabel('log10(F)'); ylabel('log10(Pxx)');
    title('PSD of the Geometric Brownian Motion')
    X2 = [ones(length(F2(2:end)), 1) log10(F2(2:end))];
    b2 = lscov(X2, log10(Pxx2(2:end)));
    y2 = b2(1)+ b2(2)*log10(F2(2:end));
    hold on;
    plot(log10(F2(2:end)), y2);
    legend(['The slope is ' num2str(b2(2))]);
    subplot(1,3,3)
    plot(log10(F3(2:end)), log10(Pxx3(2:end)));
    xlabel('log10(F)'); ylabel('log10(Pxx)');
    title(['PSD of the ', char(string(rtick(i, 2)))])
    X3 = [ones(length(F3(2:end)), 1) log10(F3(2:end))];
    b3 = lscov(X3, log10(Pxx3(2:end)));
    y3 = b3(1)+ b3(2)*log10(F3(2:end));
    hold on;
    plot(log10(F3(2:end)), y3);
    legend(['The slope is ' num2str(b3(2))]);
    saveas(p1, [path, 'power spectral density of the prices from ', ...
        char(string(rtick(i, 2))), ' in ', ...
        datestr(datetime(startDate, 'InputFormat', 'ddMMyyyy'), ...
        'dd-mm-yyyy'),' to ', datestr(datetime(endDate, ...
        'InputFormat', 'ddMMyyyy'), 'dd-mm-yyyy')], 'jpg')
    
    % Obtain the single scaling exponent and the Hölder exponent
    [~, ~, cpbrown] = dwtleader(W);
    hexp1 = wtmm(W);
    fprintf(['The scaling exponent for the Brownian Motion is ',...
        num2str(-2*cpbrown(1)-1),'\n']);
    fprintf(['The Hölder exponent for the Brownian Motion is ',...
        num2str(hexp1),'\n']);
    [~,~,cpGBM] = dwtleader(simul);
    hexp2 = wtmm(simul);
    fprintf(['The scaling exponent for the ',...
        'Geometric Brownian Motion is ', num2str(-2*cpGBM(1)-1),...
        '\n']);
    fprintf(['The Hölder exponent for the ',...
        'Geometric Brownian Motion is ',...
        num2str(hexp2),'\n']);
    [~,~,cp] = dwtleader(prices);
    hexp3 = wtmm(prices);
    fprintf(['The scaling exponent for the prices of ',...
        char(string(rtick(i, 2))),' is ', num2str(-2*cp(1)-1),'\n']);
    fprintf(['The Hölder exponent for the prices of ',...
        char(string(rtick(i, 2))),' is ', num2str(hexp3),'\n']);
    % Multifractal Spectogram and the cumulants
    [dh1, h1, hh1, qse1] = dwtleader(price2ret(simul));
    [dh2, h2, hh2, qse2] = dwtleader(ret);
    [dh3, h3, hh3, qse3] = dwtleader(simul);
    [dh4, h4, hh4, qse4] = dwtleader(W);
    [dh5, h5, hh5, qse5] = dwtleader(prices);
    p2 = figure('visible', 'off', 'units', 'normalized',...
        'outerposition', [0 0 1 1]);
    subplot(1,2,1)
    plot(h1, dh1, h2, dh2, h3, dh3, h4, dh4, h5, dh5)
    xlabel('h'); ylabel('D(h)');
    legend('simulated returns', ['Real Returns from ',...
        char(string(rtick(i, 2)))], 'GBM', 'BM', ['Prices from ',...
        char(string(rtick(i, 2)))]);
    title(['Multifractal Spectrum from ', char(string(rtick(i, 2)))]);
    subplot(1,2,2)
    plot(-5:1:5,[qse1',qse2',qse3',qse4',qse5']);
    xlabel('Moment Qth'); ylabel('Scaling Exponents');
    title(['Scaling Exponents from ', char(string(rtick(i, 2)))]);
    legend('simulated returns', ['Real Returns from ',...
        char(string(rtick(i, 2)))], 'GBM', 'BM',['Prices from ',...
        char(string(rtick(i, 2)))]);
    saveas(p2, [path, 'Multifractal Spectrum and Scaling Exponents',...
        ' of the prices from ', ...
        char(string(rtick(i, 2))), ' in ', ...
        datestr(datetime(startDate, 'InputFormat', 'ddMMyyyy'),...
        'dd-mm-yyyy'),' to ', datestr(datetime(endDate, ...
        'InputFormat', 'ddMMyyyy'), 'dd-mm-yyyy')], 'jpg')
    % Holder exponent
    fprintf(['The Hölder exponent for simulated returns is ',...
        num2str(hh1(1)),'\n'])
    fprintf(['The Hölder exponent for real returns is ',...
        num2str(hh2(1)),'\n']);
    fprintf(['The Hölder exponent for the Geometric ',...
        ' Brownian Motion is ', num2str(hh3(1)),'\n']);
    fprintf(['The Hölder exponent for the Brownian Motion is ',...
        num2str(hh4(1)),'\n']);
    fprintf(['The Hölder exponent for real prices is ',...
        num2str(hh5(1)),'\n']);
    % create tables
    rownames = {'Real prices'; 'Real returns'; ...
        'Geometric Brownian Motion '; 'Simulated returns';...
        ' Brownian Motion'};
    holderExponents = [hh5(1); hh2(1); hh3(1); hh1(1); hh4(1)];
    holderExponentsTable = table(holderExponents, 'RowNames',...
        rownames);
    holderExponentsSTable(i).HolderTbl = holderExponentsTable;
    holderExponentsSTable(i).Name = ['HölderExponents_',...
        char(string(rtick(i, 2)))];
    % write the 1 st sheet
    writetable(holderExponentsTable, [path, char(string(rtick(i, 2))),...
        '_MultiFractalAnalysis_', datestr(datetime(startDate, ...
        'InputFormat', 'ddMMyyyy'), 'dd-mm-yyyy'), '_', ...
        datestr(datetime(endDate, 'InputFormat', ...
        'ddMMyyyy'), 'dd-mm-yyyy'), '.xls'], 'Sheet', 1, ...
        'WriteRowNames', 1)
    % simulate the GFBM using the holder exponent of the real prices
    SS = GFBM(prices, hh5(1), rtick(i, 2), startDate, endDate, path);
    retSS = [0;price2ret(SS')];
    ret = [0; price2ret(prices)];
    DateReturns = stocks(i).Date;
    pricesTable = timetable(datetime(DateReturns(1:size(prices,1))),...
        prices, SS', ret, retSS);
    pricesTable.Properties.VariableNames = {'Real_Prices',...
        'GFBM_Prices', 'Real_Returns', 'GFBM_Returns'};
    pricesSTable(i).PricesTbl = pricesTable;
    pricesSTable(i).Name = ['PricesAndGFBMSimul_',...
        char(string(rtick(i, 2)))];
    % write the 2nd sheet
    writetimetable(pricesTable, [path, char(string(rtick(i, 2))), ...
        '_MultiFractalAnalysis_', datestr(datetime(startDate, ...
        'InputFormat', 'ddMMyyyy'), 'dd-mm-yyyy'), '_', ...
        datestr(datetime(endDate, 'InputFormat', ...
        'ddMMyyyy'), 'dd-mm-yyyy'), '.xls'], 'Sheet', 2)
    % open Activex server
    e = actxserver('Excel.Application');
    % open file (enter full path!)
    ewb = e.Workbooks.Open([path, ...
        char(string(rtick(i, 2))), ...
        '_MultiFractalAnalysis_', datestr(datetime(startDate, ...
        'InputFormat', 'ddMMyyyy'), 'dd-mm-yyyy'), '_', ...
        datestr(datetime(endDate, 'InputFormat', ...
        'ddMMyyyy'), 'dd-mm-yyyy'), '.xls']);
    % rename sheets
    ewb.Worksheets.Item(1).Name = 'Holder_Exponents' ;
    ewb.Worksheets.Item(2).Name = 'RealPricesAndGFBMSimulation' ;
    % save to the same file
    ewb.Save
    ewb.Close(true)
    e.Quit
end
end