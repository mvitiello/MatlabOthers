function paramsTableStructure = estimateMJDMParameters(startDate, ...
    endDate, createExcel, path, varargin)
% paramsTableStructure = estimateMJDMParameters(startDate, ...
%     endDate,createExcel, varargin)
% generates the parameters of the process 
% Merton Jump Diffusion Model (MJDM) from the financial time
% series using varargin, that determine the tickers 
% that we want in the analysis. 
% iniDate and endDate are the point in time date that we 
% want to start and finish with in the analysis.
% createExcel is an indicator to create the Excel 
% requires a path folder, the folder path where the files are saved
% try, for exmaple: 
% Params = estimateMJDMParameters(iniDate, endDate,1,'^GSPC','^IBEX',...
%     '^GDAXI', '^IXIC', '000001.SS', 'BNP.PA', 'BAC', 'BBVA.MC', ...
%     'HSBC', 'SMFG');
% warning, we have a list of tickers  but maybe 
% this list need to be updated, we included in the code an 
% error message when the ticker is missed: the ticker and 
% the name of the variable is required in the ftick variable. 
% the output are: 
% paramsTableStructure = Structure Table with n tables with 
% the estimated Parameters 
% check folder
if ~exist(path, 'dir')
    mkdir(path)
end 


% list (maybe this list need to be updated with the ticker
% and name required)

ftick = {'^GSPC', 'SP500';...
    '^IBEX', 'IBEX35';...
    '^FCHI', 'CAC40';...
    '^FTSE', 'FTSE100';...
    '^N225', 'Nikkei225';...
    '000001.SS', 'SSECompInd';...
    'BAC', 'BankAmer';...
    'C', 'Citigroup';...
    'GS', 'GoldmanSachs';...
    'JPM', 'JPMorgCh';...
    'MS', 'MorgStanl';...
    'BBVA.MC', 'BBVA';...
    'SAN', 'Santander';...
    'CABK.MC', 'Caixabank';...
    'SAB.MC', 'Sabadell';...
    'BNP.PA', 'BNP';...
    'ACA.PA', 'CreditAgricole';...
    'GLE.PA', 'SocieteGenerale';...
    'HSBC', 'HSBC';...
    'BARC.L', 'Barclays';...
    'LLOY.L', 'Lloyds';...
    'RBS.L', 'RoyalBankScot';...
    'MTU', 'MitsubishiBank';...
    'SMFG', 'SumitoBank';...
    'MFG', 'MizuhoBank';...
    '601398.SS', 'ICBC';...
    '601939.SS', 'CBC';...
    '601288.SS', 'ABC';...
    '^GDAXI', 'DAX';...
    '^IXIC', 'NASDAQ';...
    'MSFT', 'Microsoft';...
    'AMZN', 'Amazon';...
    'APPL', 'Apple';... 
    'GOOG', 'Google';...
    'PG', 'Proct&Gamb';...
    'BA', 'Boing';
    'BTC-EUR', 'BitCoin-Eur'
    };

% download the data
if ~iscell(varargin)
    dtick = varargin{1,:};
else
    dtick = varargin;
end

idx = ismember(ftick, dtick);
rtick = ftick(idx(:,1), :);
dtick2 = rtick(:, 1);
% error message if we need to update the ftick list
if size(dtick2, 1) ~= size(dtick,2)
    missedTickersloc = ismember(dtick, dtick2);
    missedTickers = strjoin(dtick(~missedTickersloc), ', ');
    error(['There are missed tickers. Consider update the list ',...
        'ftick in the code with the following tickers: ', ...
        missedTickers])
end

stocks = hist_stock_data(startDate, endDate, dtick2);

m = size(stocks,2);

for i = 1 : m
    % we obtain the returns and the parameters
    prices = stocks(i).Close;
    rt = price2ret(prices);
    
    % Discretization for daily prices
    dt = 1/252;
    
    % PDF for discretized model
    mrjpdf = @(rt, mu, mu_J, sigmaSq, sigmaSq_J, lambda) ...
        lambda .* exp((-(rt - mu_J).^2)./ (2 .* ...
        (sigmaSq + sigmaSq_J))) * (1 / sqrt( 2.* pi .* ...
        (sigmaSq + sigmaSq_J))) + (1 - lambda) .* ...
        exp(( -(rt - mu).^2 ) /(2 .* sigmaSq)).* ...
        (1 / sqrt(2 .* pi .* sigmaSq));
    
    % Constraints
    lb = [-Inf  -Inf 0 0 0];
    ub = [Inf Inf Inf Inf 1];
    
    % Initial values
    x0 = [mean(rt) mean(rt) std(rt) std(rt) 0.5];
    
    % Solve maximum likelihood
    disp(['Estimating Merton Jump parameters from '...
        char(string(rtick(i, 2))), ' in ', ...
        datestr(datetime(startDate,'InputFormat',...
        'ddMMyyyy'), 'dd-mm-yyyy'), ' to ', ...
        datestr(datetime(endDate, 'InputFormat', 'ddMMyyyy'),...
        'dd-mm-yyyy')]);
    params = mle(rt, 'pdf', mrjpdf, 'start', x0, 'lowerbound', lb, ...
        'upperbound', ub, 'optimfun', 'fmincon');
    
    mu = params(1)/dt;
    mu_J = params(2);
    sigma = params(3)/dt;
    sigma_J = params(4);
    lambda = params(5)/dt;
    
    if createExcel
    % we save the parameters in a xls
    prm = {'mu'; 'mu_J'; 'sigma'; 'sigma_J'; 'lambda'};
    params = [mu; mu_J; sigma; sigma_J; lambda];
    T = table(params, 'RowNames', prm);
    paramsTableStructure(i).Params = T;
    paramsTableStructure(i).Name = [char(string(rtick(i, 2))), ...
        '_ParamsMJDM'];
    writetable(T, [path, char(string(rtick(i, 2))), '_ParamsMJDMm_',...
        datestr(datetime(startDate,'InputFormat',...
        'ddMMyyyy'), 'ddmmyyyy'), '_', datestr(datetime(endDate,...
        'InputFormat', 'ddMMyyyy'), 'ddmmyyyy'), '.xls'],...
        'Sheet', 1, 'WriteRowNames',1)
    end 
end
end